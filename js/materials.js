//==============================================================
//  MATERIALS
//  - Materials are data structures that associate uniforms,
//    vert shaders, and frag shaders along with some render-
//    related configuration options.
//==============================================================

import * as THREE from 'three';

import simulationFragShader from '../glsl/simulationFrag.glsl';
import simulationVertShader from '../glsl/simulationVert.glsl';
import displayFragShader from '../glsl/displayFrag.glsl';
import displayVertShader from '../glsl/displayVert.glsl';
import passthroughVertShader from '../glsl/passthroughVert.glsl';
import passthroughFragShader from '../glsl/passthroughFrag.glsl';

import { simulationUniforms, displayUniforms, passthroughUniforms } from './uniforms';

/**
  Simulation material
  - This material takes a texture full of data (assumed to be
    the previous iteration result), then applies the reaction-
    diffusion equation to each pixel.
*/
export const simulationMaterial = new THREE.ShaderMaterial({
  uniforms: simulationUniforms,
  vertexShader: simulationVertShader,
  fragmentShader: simulationFragShader,
});
simulationMaterial.blending = THREE.NoBlending;


/**
  Display material
  - This material reads the data encoded in the texture
    generated by the simulation material's fragment shader
    and converts it into meaningful color data to show on
    the screen.
*/
export const displayMaterial = new THREE.ShaderMaterial({
  uniforms: displayUniforms,
  vertexShader: displayVertShader,
  fragmentShader: displayFragShader,
});
displayMaterial.blending = THREE.NoBlending;


/**
  Passthrough material
  - This material just displays a texture without any
    modifications or processing. Used when creating
    the initial texture.
*/
export const passthroughMaterial = new THREE.ShaderMaterial({
  uniforms: passthroughUniforms,
  vertexShader: passthroughVertShader,
  fragmentShader: passthroughFragShader,
});
passthroughMaterial.blending = THREE.NoBlending;